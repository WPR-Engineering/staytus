= form_for [:admin, @issue] do |f|
  = f.error_messages
  .fieldSet.u-margin-2x
    %dl.fieldSet__field.u-margin
      %dt.fieldSet__label= f.label :title
      %dd.fieldSet__input= f.text_field :title, :class => 'textInput', :autofocus => @issue.new_record?, :required => true

    - if @issue.new_record?
      %dl.fieldSet__field.u-margin
        %dt.fieldSet__label= f.label :initial_update, "Text for the first update"
        %dd.fieldSet__input= f.text_area :initial_update, :class => 'textInput', :placeholder => Issue::INITIAL_UPDATE_TEXT

      %dl.fieldSet__field.u-margin
        %dt.fieldSet__label= f.label :state
        %dd.fieldSet__input
          = render 'state_selection', :f => f, :field_name => :state

    %dl.fieldSet__field.u-margin
      %dt.fieldSet__label= f.label :service_ids, "Which services are affected?"
      %dd.fieldSet__input
        = hidden_field_tag 'issue[service_ids][]', nil
        %ul.fieldSet__checkboxList
          - for service in Service.ordered
            %li
              = check_box_tag 'issue[service_ids][]', service.id, @issue.services.include?(service), :id => "service_#{service.id}"
              = label_tag "service_#{service.id}", service.name

    - if @issue.new_record?
      %dl.fieldSet__field.u-margin
        %dt.fieldSet__label= f.label :service_status_id, "Set the status for these services to..."
        %dd.fieldSet__input
          .fieldSet__selectContainer= f.collection_select :service_status_id, ServiceStatus.problematic.sort_by_type, :id, :name

      - if site.allow_subscriptions?
        %dl.fieldSet__field.u-margin
          %dt.fieldSet__label= f.label :notify, "Notify subscribers when this issue is posted?"
          %dd.fieldSet__input
            .fieldSet__checkbox.fieldSet__selectContainer
              = f.check_box :notify
              = f.label :notify, "Yes - send notifications to #{pluralize Subscriber.verified.count, 'subscriber'}"



        %dl.fieldSet__field.u-margin
          %dt.fieldSet__label= f.label :monir_email, "Notify the minor email list when this issue is posted?"
          %dd.fieldSet__input
            .fieldSet__checkbox.fieldSet__selectContainer
              = f.check_box :minor_email
              = f.label :minor_email, "Yes - send notifications to the minor event email list"


        %dl.fieldSet__field.u-margin
          %dt.fieldSet__label= f.label :major_email, "Notify the major email list when this issue is posted?"
          %dd.fieldSet__input
            .fieldSet__checkbox.fieldSet__selectContainer
              = f.check_box :major_email
              = f.label :major_email, "Yes - send notifications to the Major event email list"


        %dl.fieldSet__field.u-margin
          %dt.fieldSet__label= f.label :critical_email, "Notify the critical email list when this issue is posted?"
          %dd.fieldSet__input
            .fieldSet__checkbox.fieldSet__selectContainer
              = f.check_box :critical_email
              = f.label :critical_email, "Yes - send notifications to the critical event email list"

  .formButtons
    - unless @issue.new_record?
      .formButtons__secondary= link_to "Delete", [:admin, @issue], :class => 'button button--solid button--grey', :method => :delete, :data => {:confirm => "Are you sure you wish to remove this issue and all updates?"}
    = f.submit :class => 'button button--solid'
    = link_to "Cancel", @issue.new_record? ? admin_issues_path : [:admin, @issue], :class => 'button button--lightGrey'
